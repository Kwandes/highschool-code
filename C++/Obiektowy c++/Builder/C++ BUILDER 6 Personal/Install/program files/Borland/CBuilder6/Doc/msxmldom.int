
{*******************************************************}
{                                                       }
{       Borland Delphi Visual Component Library         }
{       MSXML DOM Implementation Wrapper                }
{                                                       }
{ Copyright (c) 2000-2001 Borland Software Corporation  }
{                                                       }
{*******************************************************}

unit msxmldom;

interface

uses ActiveX, Windows, Variants, ComObj, msxml, xmldom, Classes;

{$IF DOMWrapperVersion >= 1.1}
{ This define is used for the changes to the calling conventions of the IDOMxxx
  interfaces after the release of Delphi 6 (safecall was added in many places) }
{$DEFINE WRAP1.1}
{$IFEND}

const

  SMSXML = 'MSXML';  { Do not localize }

type

{ IXMLDOMNodeRef }

  IXMLDOMNodeRef = interface
    ['{5EF5DAA1-2729-11D4-83DA-00C04F60B2DD}']
    function GetXMLDOMNode: IXMLDOMNode;
  end;

{ TMSDOMInterface }

  TMSDOMInterface = class(TInterfacedObject)
  public
    function SafeCallException(ExceptObject: TObject; ExceptAddr: Pointer): HRESULT; override;
  end;

{ TMSDOMImplementation }

  TMSDOMImplementation = class(TMSDOMInterface, IDOMImplementation)
  protected
     { IDOMImplementation }
    function hasFeature(const feature, version: DOMString): WordBool;
    function createDocumentType(const qualifiedName, publicId,
      systemId: DOMString): IDOMDocumentType; safecall;
    function createDocument(const namespaceURI, qualifiedName: DOMString;
      doctype: IDOMDocumentType): IDOMDocument; safecall;
  public
    constructor Create(DOMImpl: IXMLDOMImplementation);
    property MSDOMImpl: IXMLDOMImplementation;
  end;

{ TMSDOMNode }

  TMSDOMNodeClass = class of TMSDOMNode;

  TMSDOMNode = class(TMSDOMInterface, IXMLDOMNodeRef, IDOMNode, IDOMNodeEx,
    IDOMNodeSelect)
  protected
    { IXMLDOMNodeRef }
    function GetXMLDOMNode: IXMLDOMNode;
    { IDOMNode }
    function get_nodeName: DOMString; safecall;
    function get_nodeValue: DOMString; safecall;
    procedure set_nodeValue(value: DOMString); {$IFDEF WRAP1.1}safecall;{$ENDIF}
    function get_nodeType: DOMNodeType; safecall;
    function get_parentNode: IDOMNode; safecall;
    function get_childNodes: IDOMNodeList; safecall;
    function get_firstChild: IDOMNode; safecall;
    function get_lastChild: IDOMNode; safecall;
    function get_previousSibling: IDOMNode; safecall;
    function get_nextSibling: IDOMNode; safecall;
    function get_attributes: IDOMNamedNodeMap; safecall;
    function get_ownerDocument: IDOMDocument; safecall;
    function get_namespaceURI: DOMString; safecall;
    function get_prefix: DOMString; safecall;
    function get_localName: DOMString; safecall;
    function insertBefore(const newChild, refChild: IDOMNode): IDOMNode; safecall;
    function replaceChild(const newChild, oldChild: IDOMNode): IDOMNode; safecall;
    function removeChild(const childNode: IDOMNode): IDOMNode; safecall;
    function appendChild(const newChild: IDOMNode): IDOMNode; safecall;
    function hasChildNodes: WordBool; safecall;
    function cloneNode(deep: WordBool): IDOMNode; safecall;
    procedure normalize; {$IFDEF WRAP1.1}safecall;{$ENDIF}
    function supports(const feature, version: DOMString): WordBool;
    { IDOMNodeEx }
    function get_text: DOMString; safecall;
    function get_xml: DOMString; safecall;
    procedure transformNode(const stylesheet: IDOMNode; var output: WideString); overload; {$IFDEF WRAP1.1}safecall;{$ENDIF}
    procedure transformNode(const stylesheet: IDOMNode; const output: IDOMDocument); overload; {$IFDEF WRAP1.1}safecall;{$ENDIF} 
    { IDOMNodeSelect }
    function selectNode(const nodePath: WideString): IDOMNode; safecall;
    function selectNodes(const nodePath: WideString): IDOMNodeList; safecall;
    procedure set_text(const Value: DOMString); safecall;
  public
    constructor Create(ANode: IXMLDOMNode);
    property MSNode: IXMLDOMNode;
  end;

{ TMSDOMNodeList }

  TMSDOMNodeList = class(TMSDOMInterface, IDOMNodeList)
  protected
    { IDOMNodeList }
    function get_item(index: Integer): IDOMNode; safecall;
    function get_length: Integer; safecall;
  public
    constructor Create(ANodeList: IXMLDOMNodeList);
    property MSNodeList: IXMLDOMNodeList;
  end;

{ TMSDOMNamedNodeMap }

  TMSDOMNamedNodeMap = class(TMSDOMInterface, IDOMNamedNodeMap)
  protected
    { IDOMNamedNodeMap }
    function get_item(index: Integer): IDOMNode; safecall;
    function get_length: Integer; {$IFDEF WRAP1.1}safecall;{$ENDIF}
    function getNamedItem(const name: DOMString): IDOMNode; safecall;
    function setNamedItem(const newItem: IDOMNode): IDOMNode; safecall;
    function removeNamedItem(const name: DOMString): IDOMNode; safecall;
    function getNamedItemNS(const namespaceURI, localName: DOMString): IDOMNode; safecall;
    function setNamedItemNS(const arg: IDOMNode): IDOMNode; safecall;
    function removeNamedItemNS(const namespaceURI, localName: DOMString): IDOMNode; safecall;
  public
    constructor Create(ANamedNodeMap: IXMLDOMNamedNodeMap);
    property MSNamedNodeMap: IXMLDOMNamedNodeMap;
  end;

{ TMSDOMCharacterData }

  TMSDOMCharacterData = class(TMSDOMNode, IDOMCharacterData)
  protected
    { IDOMCharacterData }
    function get_data: DOMString; {$IFDEF WRAP1.1}safecall;{$ENDIF}
    procedure set_data(const data: DOMString); {$IFDEF WRAP1.1}safecall;{$ENDIF}
    function get_length: Integer; {$IFDEF WRAP1.1}safecall;{$ENDIF}
    function substringData(offset, count: Integer): DOMString; {$IFDEF WRAP1.1}safecall;{$ENDIF}
    procedure appendData(const data: DOMString); {$IFDEF WRAP1.1}safecall;{$ENDIF}
    procedure insertData(offset: Integer; const data: DOMString); {$IFDEF WRAP1.1}safecall;{$ENDIF}
    procedure deleteData(offset, count: Integer); {$IFDEF WRAP1.1}safecall;{$ENDIF}
    procedure replaceData(offset, count: Integer; const data: DOMString); {$IFDEF WRAP1.1}safecall;{$ENDIF}
  public
    property MSCharacterData: IXMLDOMCharacterData;
  end;

{ TMSDOMAttr }

  TMSDOMAttr = class(TMSDOMNode, IDOMAttr)
  protected
    { Property Get/Set }
    function get_name: DOMString; {$IFDEF WRAP1.1}safecall;{$ENDIF}
    function get_specified: WordBool; {$IFDEF WRAP1.1}safecall;{$ENDIF}
    function get_value: DOMString; {$IFDEF WRAP1.1}safecall;{$ENDIF}
    procedure set_value(const attributeValue: DOMString); {$IFDEF WRAP1.1}safecall;{$ENDIF}
    function get_ownerElement: IDOMElement; {$IFDEF WRAP1.1}safecall;{$ENDIF}
    { Properties }
    property name: DOMString;
    property specified: WordBool;
    property value: DOMString;
    property ownerElement: IDOMElement;
  public
    property MSAttribute: IXMLDOMAttribute;
  end;

{ TMSDOMElement }

  TMSDOMElement = class(TMSDOMNode, IDOMElement)
  protected
    { IDOMElement }
    function get_tagName: DOMString; safecall;
    function getAttribute(const name: DOMString): DOMString; safecall;
    procedure setAttribute(const name, value: DOMString); {$IFDEF WRAP1.1}safecall;{$ENDIF}
    procedure removeAttribute(const name: DOMString); {$IFDEF WRAP1.1}safecall;{$ENDIF}
    function getAttributeNode(const name: DOMString): IDOMAttr; safecall;
    function setAttributeNode(const newAttr: IDOMAttr): IDOMAttr; safecall;
    function removeAttributeNode(const oldAttr: IDOMAttr): IDOMAttr; safecall;
    function getElementsByTagName(const name: DOMString): IDOMNodeList; safecall;
    function getAttributeNS(const namespaceURI, localName: DOMString): DOMString; safecall;
    procedure setAttributeNS(const namespaceURI, qualifiedName, value: DOMString); {$IFDEF WRAP1.1}safecall;{$ENDIF}
    procedure removeAttributeNS(const namespaceURI, localName: DOMString); {$IFDEF WRAP1.1}safecall;{$ENDIF}
    function getAttributeNodeNS(const namespaceURI, localName: DOMString): IDOMAttr; safecall;
    function setAttributeNodeNS(const newAttr: IDOMAttr): IDOMAttr; safecall;
    function getElementsByTagNameNS(const namespaceURI,
      localName: DOMString): IDOMNodeList; safecall;
    function hasAttribute(const name: DOMString): WordBool; safecall;
    function hasAttributeNS(const namespaceURI, localName: DOMString): WordBool; {$IFDEF WRAP1.1}safecall;{$ENDIF}
    procedure normalize; {$IFDEF WRAP1.1}safecall;{$ENDIF}
  public
    property MSElement: IXMLDOMElement;
  end;

{ TMSDOMText }

  TMSDOMText = class(TMSDOMCharacterData, IDOMText)
  protected
    function splitText(offset: Integer): IDOMText; safecall;
  end;

{ TMSDOMComment }

  TMSDOMComment = class(TMSDOMCharacterData, IDOMComment)
  end;

{ TMSDOMCDATASection }

  TMSDOMCDATASection = class(TMSDOMText, IDOMCDATASection)
  end;

{ TMSDOMDocumentType }

  TMSDOMDocumentType = class(TMSDOMNode, IDOMDocumentType)
  protected
    { IDOMDocumentType }
    function get_name: DOMString; safecall;
    function get_entities: IDOMNamedNodeMap; safecall;
    function get_notations: IDOMNamedNodeMap; safecall;
    function get_publicId: DOMString; safecall;
    function get_systemId: DOMString; safecall;
    function get_internalSubset: DOMString; safecall;
  public
    property MSDocumentType: IXMLDOMDocumentType;
  end;

{ TMSDOMNotation }

  TMSDOMNotation = class(TMSDOMNode, IDOMNotation)
  protected
    { IDOMNotation }
    function get_publicId: DOMString; safecall;
    function get_systemId: DOMString; safecall;
  public
    property MSNotation: IXMLDOMNotation;
  end;

{ TMSDOMEntity }

  TMSDOMEntity = class(TMSDOMNode, IDOMEntity)
  protected
    { IDOMEntity }
    function get_publicId: DOMString; safecall;
    function get_systemId: DOMString; safecall;
    function get_notationName: DOMString; safecall;
  public
    property MSEntity: IXMLDOMEntity;
  end;

{ TMSDOMEntityReference }

  TMSDOMEntityReference = class(TMSDOMNode, IDOMEntityReference)
  end;

{ TMSDOMProcessingInstruction }

  TMSDOMProcessingInstruction = class(TMSDOMNode, IDOMProcessingInstruction)
  protected
    { IDOMProcessingInstruction }
    function get_target: DOMString; safecall;
    function get_data: DOMString; safecall;
    procedure set_data(const value: DOMString); {$IFDEF WRAP1.1}safecall;{$ENDIF}
  public
    property MSProcessingInstruction: IXMLDOMProcessingInstruction;
  end;

{ TMSDOMDocumentFragment }

  TMSDOMDocumentFragment = class(TMSDOMNode, IDOMDocumentFragment)
  end;

{ TMSDOMEventHandler }

  TMSDOMDocument = class;

  TMSDOMEventHandler = class(TInterfacedObject, IDispatch)
  protected
    { IDispatch }
    function GetIDsOfNames(const IID: TGUID; Names: Pointer;
      NameCount, LocaleID: Integer; DispIDs: Pointer): HResult; virtual; stdcall;
    function GetTypeInfo(Index, LocaleID: Integer; out TypeInfo): HResult; virtual; stdcall;
    function GetTypeInfoCount(out Count: Integer): HResult; virtual; stdcall;
    function Invoke(DispID: Integer; const IID: TGUID; LocaleID: Integer;
      Flags: Word; var Params; VarResult, ExcepInfo, ArgErr: Pointer): HResult; virtual; stdcall;
  public
    constructor Create(const Document: TMSDOMDocument;
      AsyncEventHandler: TAsyncEventHandler; Sender: TObject);
  end;

{ TMSDOMDocument }

  TMSDOMDocument = class(TMSDOMNode, IDOMDocument, IDOMParseOptions, IDOMPersist,
    IDOMParseError)
  protected
    { IDOMDocument }
    function get_doctype: IDOMDocumentType; safecall;
    function get_domImplementation: IDOMImplementation; safecall;
    function get_documentElement: IDOMElement; safecall;
    procedure set_documentElement(const IDOMElement: IDOMElement); {$IFDEF WRAP1.1}safecall;{$ENDIF}
    function createElement(const tagName: DOMString): IDOMElement; safecall;
    function createDocumentFragment: IDOMDocumentFragment; safecall;
    function createTextNode(const data: DOMString): IDOMText; safecall;
    function createComment(const data: DOMString): IDOMComment; safecall;
    function createCDATASection(const data: DOMString): IDOMCDATASection; safecall;
    function createProcessingInstruction(const target,
      data: DOMString): IDOMProcessingInstruction; safecall;
    function createAttribute(const name: DOMString): IDOMAttr; safecall;
    function createEntityReference(const name: DOMString): IDOMEntityReference; safecall;
    function getElementsByTagName(const tagName: DOMString): IDOMNodeList; safecall;
    function importNode(importedNode: IDOMNode; deep: WordBool): IDOMNode; safecall;
    function createElementNS(const namespaceURI,
      qualifiedName: DOMString): IDOMElement; safecall;
    function createAttributeNS(const namespaceURI,
      qualifiedName: DOMString): IDOMAttr; safecall;
    function getElementsByTagNameNS(const namespaceURI,
      localName: DOMString): IDOMNodeList; safecall;
    function getElementById(const elementId: DOMString): IDOMElement; {$IFDEF WRAP1.1}safecall;{$ENDIF}
    { IDOMParseOptions }
    function get_async: Boolean; {$IFDEF WRAP1.1}safecall;{$ENDIF}
    function get_preserveWhiteSpace: Boolean; {$IFDEF WRAP1.1}safecall;{$ENDIF}
    function get_resolveExternals: Boolean; {$IFDEF WRAP1.1}safecall;{$ENDIF}
    function get_validate: Boolean; {$IFDEF WRAP1.1}safecall;{$ENDIF}
    procedure set_async(Value: Boolean); {$IFDEF WRAP1.1}safecall;{$ENDIF}
    procedure set_preserveWhiteSpace(Value: Boolean); {$IFDEF WRAP1.1}safecall;{$ENDIF}
    procedure set_resolveExternals(Value: Boolean); {$IFDEF WRAP1.1}safecall;{$ENDIF}
    procedure set_validate(Value: Boolean); {$IFDEF WRAP1.1}safecall;{$ENDIF}
    { IDOMPersist }
    function get_xml: DOMString; safecall;
    function asyncLoadState: Integer; safecall;
    function load(source: OleVariant): WordBool; safecall;
    function loadFromStream(const stream: TStream): WordBool; {$IFDEF WRAP1.1}overload;{$ENDIF} safecall;
    function loadxml(const Value: DOMString): WordBool; safecall;
    procedure save(destination: OleVariant); safecall;
    procedure saveToStream(const stream: TStream); {$IFDEF WRAP1.1}overload;{$ENDIF} safecall; 
    procedure set_OnAsyncLoad(const Sender: TObject;
      EventHandler: TAsyncEventHandler); safecall;
    {$IFDEF WRAP1.1}
    function loadFromStream(const stream: IStream): WordBool; overload; safecall;
    procedure saveToStream(const stream: IStream); overload; safecall;
    {$ENDIF}
    { IDOMParseError }
    function get_errorCode: Integer; {$IFDEF WRAP1.1}safecall;{$ENDIF}
    function get_url: WideString; safecall;
    function get_reason: WideString; safecall;
    function get_srcText: WideString; safecall;
    function get_line: Integer; {$IFDEF WRAP1.1}safecall;{$ENDIF}
    function get_linepos: Integer; {$IFDEF WRAP1.1}safecall;{$ENDIF}
    function get_filepos: Integer; {$IFDEF WRAP1.1}safecall;{$ENDIF}
  public
    property MSDocument: IXMLDOMDocument;
  end;

{ TMSDOMImplementationFactory }

  TMSDOMImplementationFactory = class(TDOMVendor)
  public
    function DOMImplementation: IDOMImplementation; override;
    function Description: String; override;
  end;

function CreateDOMDocument: IXMLDOMDocument;
function LoadFromXMLString(const Doc: IXMLDOMDocument; const XML: string): Boolean;

type
 TMSXMLDOMDocumentCreateFunc = function: IXMLDOMDocument;
var
  MSXML_DOM: TMSDOMImplementationFactory;
  MSXMLDOMDocumentCreate: TMSXMLDOMDocumentCreateFunc = CreateDOMDocument;

implementation
