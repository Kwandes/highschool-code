{*******************************************************}
{                                                       }
{ Borland Delphi Visual Component Library               }
{                SOAP Support                           }
{                                                       }
{ Copyright (c) 2001 Borland Software Corporation       }
{                                                       }
{*******************************************************}
unit XSBuiltIns;

interface

uses SysUtils, InvokeRegistry, FMTBcd, Types;

const
  SHexMarker               = '$';      { do not localize }
  SoapTimePrefix           = 'T';      { do not localize }
  XMLDateSeparator         = '-';      { do not localize }
  XMLHourOffsetMinusMarker = '-';      { do not localize }
  XMLHourOffsetPlusMarker  = '+';      { do not localize }
  XMLTimeSeparator         = ':';      { do not localize }
  XMLMonthPos              = 6;                    
  XMLDayPos                = 9;                      
  XMLYearPos               = 1;
  XMLMilSecPos             = 10;
  XMLDefaultYearDigits     = 4;        
  XMLDurationStart         = 'P';      { do not localize }
  XMLDurationYear          = 'Y';      { do not localize }
  XMLDurationMonth         = 'M';      { do not localize }
  XMLDurationDay           = 'D';      { do not localize }
  XMLDurationHour          = 'H';      { do not localize }
  XMLDurationMinute        = 'M';      { do not localize }
  XMLDurationSecond        = 'S';      { do not localize }
  SNAN                     = 'NAN';    { do not localize }
  SSciNotationMarker: Char = 'E';      { do not localize }
  SDecimal: Char           = '.';      { do not localize }
  SNegative: Char          = '-';      { do not localize }
  SPlus: Char              = '+';      { do not localize }

type

{ forward declarations }

TXSDuration = class;
TXSTime = class;
TXSDate = class;
TXSDateTime = class;

{ TXSTime }

TXSTime = class(TRemotableXS)
  protected
    function GetAsTime: TDateTime;
    function GetFractionalSeconds: Double;
    function GetFractionalSecondString: string;
    function GetHourOffset: SmallInt;
    function GetMillisecond: Word;
    function GetMinuteOffset: SmallInt;
    procedure SetAsTime(Value: TDateTime);
    procedure SetFractionalSeconds(Value: Double);
    procedure SetHour(const Value: Word);
    procedure SetHourOffset(const Value: SmallInt);
    procedure SetMillisecond(const Value: Word);
    procedure SetMinute(const Value: Word);
    procedure SetMinuteOffset(const Value: SmallInt);
    procedure SetSecond(const Value: Word);
    property FractionalSecondString: string;
  public
    property AsTime: TDateTime;
    property FractionalSeconds: Double;
    property Hour: Word default 0;
    property HourOffset: SmallInt default 0;
    property Millisecond: Word default 0;
    property Minute: Word default 0;
    property MinuteOffset: SmallInt;
    property Second: Word default 0;
    property UseZeroMilliseconds: Boolean;
    function Clone: TXSTime;
    procedure XSToNative(Value: WideString); override;
    function NativeToXS: WideString; override;
end;

{ TXSDate }

TXSDate = class(TRemotableXS)
  protected
    function GetAsDate: TDateTime;
    function GetYear: Integer;
    procedure SetAsDate(Value: TDateTime);
    procedure SetMonth(const Value: Word);
    procedure SetDay(const Value: Word);
    procedure SetYear(const Value: Integer);
    property MaxDay: Word;
    property MaxMonth: Word;
    property MinDay: Word;
    property MinMonth: Word;
  public
    constructor Create; override;
    property Month: Word default 0;
    property Day: Word default 0;
    property Year: Integer default 0;
    function Clone: TXSDate;
    procedure XSToNative(Value: WideString); override;
    function NativeToXS: WideString; override;
    property AsDate: TDateTime;
end;

{ TXSCustomDateTime }

TXSCustomDateTime = class(TRemotableXS)
  protected
    function GetAsDateTime: TDateTime;
    function GetDay: Word;
    function GetFractionalSeconds: Double;
    function GetHour: Word;
    function GetHourOffset: SmallInt;
    function GetMonth: Word;
    function GetMillisecond: Word;
    function GetMinute: Word;
    function GetMinuteOffset: SmallInt;
    function GetSecond: Word;
    function GetYear: Integer;
    procedure SetAsDateTime(Value: TDateTime);
    procedure SetFractionalSeconds(Value: Double);
    procedure SetDay(const Value: Word); virtual;
    procedure SetHour(const Value: Word); virtual;
    procedure SetHourOffset(const Value: SmallInt); virtual;
    procedure SetMillisecond(const Value: Word); virtual;
    procedure SetMinute(const Value: Word); virtual;
    procedure SetMinuteOffset(const Value: SmallInt); virtual;
    procedure SetMonth(const Value: Word); virtual;
    procedure SetSecond(const Value: Word); virtual;
    procedure SetYear(const Value: Integer); virtual;
    property Millisecond: Word default 0;
  public
    constructor Create;  override;
    destructor Destroy; override;
    property AsDateTime: TDateTime;
    property Hour: Word default 0;
    property Minute: Word default 0;
    property Second: Word default 0;
    property Month: Word default 0;
    property Day: Word default 0;
    property Year: Integer default 0;
    property UseZeroMilliseconds: Boolean;
end;

{ TXSDateTime }

TXSDateTime = class(TXSCustomDateTime)
  public  
    function CompareDateTimeParam(const Value1, Value2: TXSDateTime): TXSDuration;
  public
    function Clone: TXSDateTime;
    property Millisecond: Word default 0;
    property HourOffset: SmallInt default 0;
    property MinuteOffset: SmallInt default 0;
    procedure XSToNative(Value: WideString); override;
    function NativeToXS: WideString; override;
end;

{ TXSDuration }

TXSDuration = class(TXSCustomDateTime)
  protected
    procedure SetDecimalSecond(const Value: Double);
  public
    constructor Create; override;
    procedure XSToNative(Value: WideString); override;
    function NativeToXS: WideString; override;
    property DecimalSecond: Double;
end;

EXSDateTimeException = class(Exception);
EXSDecimalException = class(Exception);
EXSHexBinaryException = class(Exception);

{ TXSHexBinary }
TXSHexBinary = class(TRemotableXS)
  public
    procedure XSToNative(Value: WideString); override;
    function  NativeToXS: WideString; override;
    property  HexBinaryString: string;
    property  AsByteArray: TByteDynArray;
end;

{ TXSDecimal }
{ Rudimentary support (strictly to handle xsd:decimal) for now }
TXSDecimal = class(TRemotableXS)
  public
    procedure XSToNative(Value: WideString); override;
    function  NativeToXS: WideString; override;
    property  DecimalString: string;
    property  AsBcd: TBcd;
end;

{ TXSString }
TXSString = class(TRemotableXS)
  public
    procedure XSToNative(Value: WideString); override;
    function  NativeToXS: WideString; override;
  end;

TXSTimeInstant = TXSDateTime;

{ Utility function }

function DateTimeToXSDateTime(Value: TDateTime; CalcLocalBias: Boolean = False): TXSDateTime;

implementation
