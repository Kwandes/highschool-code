{*******************************************************}
{                                                       }
{ Borland Delphi Visual Component Library               }
{ v2.4 http://www.philo.de                              }
{                                                       }
{ Copyright (c) 2001 Borland Software Corporation       }
{ Contributions by Keith Wood (kbwood@compuserve.com)   }
{                                                       }
{*******************************************************}

unit oxmldom;

interface

uses
{$IFDEF MSWINDOWS}
  ComObj, ActiveX,
{$ENDIF}
{$IFDEF LINUX}
  Types,
{$ENDIF}
  SysUtils, Classes, Variants, xmldom, xdom;

{$IF DOMWrapperVersion > 1.0}
{ This define is used for the changes to the calling conventions of the IDOMxxx
  interfaces after the release of Delphi 6 (safecall was added in many places) }
{$DEFINE WRAPVER1.1}
{$IFEND}

{$HPPEMIT '#pragma link "oxmldom.obj"'}
const
  SOpenXML  = 'Open XML'; { Do not localize }

type

{ IOXDOMNodeRef }

  IOXDOMNodeRef = interface
    ['{921E0E60-BC17-11D4-9ABD-9039FDE1134E}']
    function GetDOMNode: TdomNode;
  end;

{ TOXDOMInterface }

  TOXDOMInterface = class(TInterfacedObject)
  public
    function SafeCallException(ExceptObject: TObject; ExceptAddr: Pointer): HRESULT; override;
  end;

{ TOXDOMImplementation }


   PParseErrorInfo = ^TParseErrorInfo;
   TParseErrorInfo = record
     errorCode: Integer;
     url: WideString;
     reason: WideString;
     srcText: WideString;
     line: Integer;
     linePos: Integer;
     filePos: Integer;
   end;

  TOXDOMDocument = class;

  TOXDOMImplementation = class(TOXDOMInterface, IDOMImplementation)
  protected
    { IDOMImplementation }
    function hasFeature(const feature, version: DOMString): WordBool;
    function createDocumentType(const qualifiedName, publicId,
      systemId: DOMString): IDOMDocumentType; safecall;
    function createDocument(const namespaceURI, qualifiedName: DOMString;
      doctype: IDOMDocumentType): IDOMDocument; safecall;
    procedure OnXMLDeclaration(processorAgent: TXmlCustomProcessorAgent;
      locator: TdomStandardLocator; var verDl, encDl, sdDl: wideString);
  public
    constructor Create;
    destructor Destroy; override;
    { Parsing Helpers for IDOMPersist }
    procedure FreeDocument(var Doc: TdomDocument);
    procedure InitParserAgent;
    function loadFromStream(const stream: TStream; const Doc: TOXDOMDocument;
      var ParseError: TParseErrorInfo): WordBool;
    function loadxml(const Value: DOMString; const Doc: TdomDocument;
      var ParseError: TParseErrorInfo): WordBool;
    procedure ParseErrorHandler(processorAgent: TXmlCustomProcessorAgent;
      e: TXmlParserError);
    property DOMImpl: TdomImplementation;
  end;

{ TOXDOMNode }

  TOXDOMNodeClass = class of TOXDOMNode;

  TOXDOMNode = class(TOXDOMInterface, IOXDOMNodeRef,
    IDOMNode, IDOMNodeEx, IDOMNodeSelect)
  protected
    { IOXDOMNodeRef }
    function GetDOMNode: TdomNode;
    { IDOMNode }
    function get_nodeName: DOMString; safecall;
    function get_nodeValue: DOMString; safecall;
    procedure set_nodeValue(value: DOMString); {$IFDEF WRAPVER1.1} safecall; {$ENDIF}
    function get_nodeType: DOMNodeType; safecall;
    function get_parentNode: IDOMNode; safecall;
    function get_childNodes: IDOMNodeList; virtual; safecall;
    function get_firstChild: IDOMNode; safecall;
    function get_lastChild: IDOMNode; safecall;
    function get_previousSibling: IDOMNode; safecall;
    function get_nextSibling: IDOMNode; safecall;
    function get_attributes: IDOMNamedNodeMap; safecall;
    function get_ownerDocument: IDOMDocument; safecall;
    function get_namespaceURI: DOMString; safecall;
    function get_prefix: DOMString; safecall;
    function get_localName: DOMString; safecall;
    function insertBefore(const newChild, refChild: IDOMNode): IDOMNode; safecall;
    function replaceChild(const newChild, oldChild: IDOMNode): IDOMNode; safecall;
    function removeChild(const childNode: IDOMNode): IDOMNode; safecall;
    function appendChild(const newChild: IDOMNode): IDOMNode; safecall;
    function hasChildNodes: WordBool; virtual; safecall;
    function cloneNode(deep: WordBool): IDOMNode; safecall;
    procedure normalize; {$IFDEF WRAPVER1.1} safecall; {$ENDIF}
    function supports(const feature, version: DOMString): WordBool;
    { IDOMNodeEx }
    function get_text: DOMString; safecall;
    function get_xml: DOMString; safecall;
    procedure set_text(const Value: DOMString); safecall;
    procedure transformNode(const stylesheet: IDOMNode; var output: WideString); overload; {$IFDEF WRAPVER1.1} safecall; {$ENDIF}
    procedure transformNode(const stylesheet: IDOMNode; const output: IDOMDocument); overload; {$IFDEF WRAPVER1.1} safecall; {$ENDIF}
    { IDOMNodeSelect }
    function selectNode(const nodePath: WideString): IDOMNode; safecall;
    function selectNodes(const nodePath: WideString): IDOMNodeList; safecall;
  public
    constructor Create(ANode: TdomNode; OXDOMDocument: TOXDOMDocument); virtual;
    destructor Destroy; override;
    property Node: TdomNode;
    property OXDOMDocument: TOXDOMDocument;
  end;

{ TOXDOMNodeList }

  TOXDOMNodeList = class(TOXDOMInterface, IDOMNodeList)
  protected
    { IDOMNodeList }
    function get_item(index: Integer): IDOMNode; safecall;
    function get_length: Integer; safecall;
  public
    constructor Create(ANodeList: TdomNodeList; OXDOMNode: TOXDOMNode);
    property NodeList: TdomNodeList;
  end;

{ TOXDOMNamedNodeMap }

  TOXDOMNamedNodeMap = class(TOXDOMInterface, IDOMNamedNodeMap)
  protected
    { IDOMNamedNodeMap }
    function get_item(index: Integer): IDOMNode; safecall;
    function get_length: Integer; {$IFDEF WRAPVER1.1} safecall; {$ENDIF}
    function getNamedItem(const name: DOMString): IDOMNode; safecall;
    function setNamedItem(const arg: IDOMNode): IDOMNode; safecall;
    function removeNamedItem(const name: DOMString): IDOMNode; safecall;
    function getNamedItemNS(const namespaceURI, localName: DOMString): IDOMNode;
      safecall;
    function setNamedItemNS(const arg: IDOMNode): IDOMNode; safecall;
    function removeNamedItemNS(const namespaceURI, localName: DOMString):
      IDOMNode; safecall;
  public
    constructor Create(ANamedNodeMap: TdomNamedNodeMap; OXDOMNode: TOXDOMNode);
    property NamedNodeMap: TdomNamedNodeMap;
  end;

{ TOXDOMCharacterData }

  TOXDOMCharacterData = class(TOXDOMNode, IDOMCharacterData)
  protected
    { IDOMCharacterData }
    function get_data: DOMString; {$IFDEF WRAPVER1.1} safecall; {$ENDIF}
    procedure set_data(const data: DOMString); {$IFDEF WRAPVER1.1} safecall; {$ENDIF}
    function get_length: Integer; {$IFDEF WRAPVER1.1} safecall; {$ENDIF}
    function substringData(offset, count: Integer): DOMString; {$IFDEF WRAPVER1.1} safecall; {$ENDIF}
    procedure appendData(const data: DOMString); {$IFDEF WRAPVER1.1} safecall; {$ENDIF}
    procedure insertData(offset: Integer; const data: DOMString); {$IFDEF WRAPVER1.1} safecall; {$ENDIF}
    procedure deleteData(offset, count: Integer); {$IFDEF WRAPVER1.1} safecall; {$ENDIF}
    procedure replaceData(offset, count: Integer; const data: DOMString); {$IFDEF WRAPVER1.1} safecall; {$ENDIF}
  public
    property CharacterData: TdomCharacterData;
  end;

{ TOXDOMAttr }

  TOXDOMAttr = class(TOXDOMNode, IDOMAttr)
  protected
    { Property Get/Set }
    function get_name: DOMString; {$IFDEF WRAPVER1.1} safecall; {$ENDIF}
    function get_specified: WordBool; {$IFDEF WRAPVER1.1} safecall; {$ENDIF}
    function get_value: DOMString; {$IFDEF WRAPVER1.1} safecall; {$ENDIF}
    procedure set_value(const attributeValue: DOMString); {$IFDEF WRAPVER1.1} safecall; {$ENDIF}
    function get_ownerElement: IDOMElement; {$IFDEF WRAPVER1.1} safecall; {$ENDIF}
    { Properties }
    property name: DOMString;
    property specified: WordBool;
    property value: DOMString;
    property ownerElement: IDOMElement;
  public
    property Attribute: TdomAttr;
  end;

{ TOXDOMElement }

  TOXDOMElement = class(TOXDOMNode, IDOMElement)
  protected
    { IDOMElement }
    function get_tagName: DOMString; safecall;
    function getAttribute(const name: DOMString): DOMString; safecall;
    procedure setAttribute(const name, value: DOMString); {$IFDEF WRAPVER1.1} safecall; {$ENDIF}
    procedure removeAttribute(const name: DOMString); {$IFDEF WRAPVER1.1} safecall; {$ENDIF}
    function getAttributeNode(const name: DOMString): IDOMAttr; safecall;
    function setAttributeNode(const newAttr: IDOMAttr): IDOMAttr; safecall;
    function removeAttributeNode(const oldAttr: IDOMAttr): IDOMAttr; safecall;
    function getElementsByTagName(const name: DOMString): IDOMNodeList;
      safecall;
    function getAttributeNS(const namespaceURI, localName: DOMString):
      DOMString; safecall;
    procedure setAttributeNS(const namespaceURI, qualifiedName,
      value: DOMString); {$IFDEF WRAPVER1.1} safecall; {$ENDIF}
    procedure removeAttributeNS(const namespaceURI, localName: DOMString); {$IFDEF WRAPVER1.1} safecall; {$ENDIF}
    function getAttributeNodeNS(const namespaceURI, localName: DOMString):
      IDOMAttr; safecall;
    function setAttributeNodeNS(const newAttr: IDOMAttr): IDOMAttr; safecall;
    function getElementsByTagNameNS(const namespaceURI,
      localName: DOMString): IDOMNodeList; safecall;
    function hasAttribute(const name: DOMString): WordBool; safecall;
    function hasAttributeNS(const namespaceURI, localName: DOMString): WordBool; {$IFDEF WRAPVER1.1} safecall; {$ENDIF}
    procedure normalize; {$IFDEF WRAPVER1.1} safecall; {$ENDIF}
  public
    property Element: TdomElement;
  end;

{ TOXDOMText }

  TOXDOMText = class(TOXDOMCharacterData, IDOMText)
  protected
    function splitText(offset: Integer): IDOMText; safecall;
  end;

{ TOXDOMComment }

  TOXDOMComment = class(TOXDOMCharacterData, IDOMComment)
  end;

{ TOXDOMCDATASection }

  TOXDOMCDATASection = class(TOXDOMText, IDOMCDATASection)
  end;

{ TOXDOMDocumentType }

  TOXDOMDocumentTypeChildren = class;

  TOXDOMDocumentType = class(TOXDOMNode, IDOMDocumentType)
  protected
    function get_childNodes: IDOMNodeList; override; safecall;
    function hasChildNodes: WordBool; override; safecall;
    { IDOMDocumentType }
    function get_name: DOMString; safecall;
    function get_entities: IDOMNamedNodeMap; safecall;
    function get_notations: IDOMNamedNodeMap; safecall;
    function get_publicId: DOMString; safecall;
    function get_systemId: DOMString; safecall;
    function get_internalSubset: DOMString; safecall;
  public
    constructor Create(ANode: TdomNode; OXDOMDocument: TOXDOMDocument); override;
    destructor Destroy; override;
    property DocumentType: TdomDocumentType;
  end;

  TOXDOMDocumentTypeChildren = class(TInterfacedObject, IDOMNodeList)
  protected
    { IDOMNodeList }
    function get_item(index: Integer): IDOMNode; safecall;
    function get_length: Integer; safecall;
  public
    constructor Create(DocumentType: TOXDOMDocumentType);
  end;

{ TOXDOMNotation }

  TOXDOMNotation = class(TOXDOMNode, IDOMNotation)
  protected
    { IDOMNotation }
    function get_publicId: DOMString; safecall;
    function get_systemId: DOMString; safecall;
  public
    property Notation: TdomNotation;
  end;

{ TOXDOMEntity }

  TOXDOMEntity = class(TOXDOMNode, IDOMEntity)
  protected
    { IDOMEntity }
    function get_publicId: DOMString; safecall;
    function get_systemId: DOMString; safecall;
    function get_notationName: DOMString; safecall;
  public
    property Entity: TdomEntity;
  end;

{ TOXDOMEntityReference }

  TOXDOMEntityReference = class(TOXDOMNode, IDOMEntityReference)
  end;

{ TOXDOMProcessingInstruction }

  TOXDOMProcessingInstruction = class(TOXDOMNode, IDOMProcessingInstruction)
  protected
    { IDOMProcessingInstruction }
    function get_target: DOMString; safecall;
    function get_data: DOMString; safecall;
    procedure set_data(const value: DOMString); {$IFDEF WRAPVER1.1} safecall; {$ENDIF}
  public
    property ProcessingInstruction: TdomProcessingInstruction;
  end;

{ TOXDOMDocumentFragment }

  TOXDOMDocumentFragment = class(TOXDOMNode, IDOMDocumentFragment)
  end;

{ TOXDOMDocument }

  TOXDOMDocument = class(TOXDOMNode, IDOMDocument, IDOMParseOptions,
    IDOMPersist, IDOMParseError, IDOMXMLProlog)
  protected
    { IDOMDocument }
    function get_doctype: IDOMDocumentType; safecall;
    function get_domImplementation: IDOMImplementation; safecall;
    function get_documentElement: IDOMElement; safecall;
    procedure set_documentElement(const DOMElement: IDOMElement); {$IFDEF WRAPVER1.1} safecall; {$ENDIF}
    function createElement(const tagName: DOMString): IDOMElement; safecall;
    function createDocumentFragment: IDOMDocumentFragment; safecall;
    function createTextNode(const data: DOMString): IDOMText; safecall;
    function createComment(const data: DOMString): IDOMComment; safecall;
    function createCDATASection(const data: DOMString): IDOMCDATASection;
      safecall;
    function createProcessingInstruction(const target,
      data: DOMString): IDOMProcessingInstruction; safecall;
    function createAttribute(const name: DOMString): IDOMAttr; safecall;
    function createEntityReference(const name: DOMString): IDOMEntityReference;
      safecall;
    function getElementsByTagName(const tagName: DOMString): IDOMNodeList;
      safecall;
    function importNode(importedNode: IDOMNode; deep: WordBool): IDOMNode;
      safecall;
    function createElementNS(const namespaceURI,
      qualifiedName: DOMString): IDOMElement; safecall;
    function createAttributeNS(const namespaceURI,
      qualifiedName: DOMString): IDOMAttr; safecall;
    function getElementsByTagNameNS(const namespaceURI,
      localName: DOMString): IDOMNodeList; safecall;
    function getElementById(const elementId: DOMString): IDOMElement; {$IFDEF WRAPVER1.1} safecall; {$ENDIF}
    { IDOMParseOptions }
    function get_async: Boolean; {$IFDEF WRAPVER1.1} safecall; {$ENDIF}
    function get_preserveWhiteSpace: Boolean; {$IFDEF WRAPVER1.1} safecall; {$ENDIF}
    function get_resolveExternals: Boolean; {$IFDEF WRAPVER1.1} safecall; {$ENDIF}
    function get_validate: Boolean; {$IFDEF WRAPVER1.1} safecall; {$ENDIF}
    procedure set_async(Value: Boolean); {$IFDEF WRAPVER1.1} safecall; {$ENDIF}
    procedure set_preserveWhiteSpace(Value: Boolean); {$IFDEF WRAPVER1.1} safecall; {$ENDIF}
    procedure set_resolveExternals(Value: Boolean); {$IFDEF WRAPVER1.1} safecall; {$ENDIF}
    procedure set_validate(Value: Boolean); {$IFDEF WRAPVER1.1} safecall; {$ENDIF}
    { IDOMPersist }
    function get_xml: DOMString; safecall;
    function asyncLoadState: Integer; safecall;
    function load(source: OleVariant): WordBool; safecall;
    function loadFromStream(const stream: TStream): WordBool; {$IFDEF WRAPVER1.1} overload; {$ENDIF} safecall;
    function loadxml(const Value: DOMString): WordBool; safecall;
    procedure save(destination: OleVariant); safecall;
    procedure saveToStream(const stream: TStream); {$IFDEF WRAPVER1.1} overload; {$ENDIF} safecall;
    procedure set_OnAsyncLoad(const Sender: TObject;
      EventHandler: TAsyncEventHandler); safecall;
{$IFDEF WRAPVER1.1}
    function loadFromStream(const stream: IStream): WordBool; overload; safecall;
    procedure saveToStream(const stream: IStream); overload; safecall;
{$ENDIF}
    { IDOMParseError }
    function get_errorCode: Integer; {$IFDEF WRAPVER1.1} safecall; {$ENDIF}
    function get_url: WideString; safecall;
    function get_reason: WideString; safecall;
    function get_srcText: WideString; safecall;
    function get_line: Integer; {$IFDEF WRAPVER1.1} safecall; {$ENDIF}
    function get_linepos: Integer; {$IFDEF WRAPVER1.1} safecall; {$ENDIF}
    function get_filepos: Integer; {$IFDEF WRAPVER1.1} safecall; {$ENDIF}
    { IDOMXMLProlog }
    function get_Encoding: DOMString; safecall;
    function get_Standalone: DOMString; safecall;
    function get_Version: DOMString; safecall;
    procedure set_Encoding(const Value: DOMString); safecall;
    procedure set_Standalone(const Value: DOMString); safecall;
    procedure set_Version(const Value: DOMString); safecall;
  public
    constructor Create(OXDOMImpl: TOXDOMImplementation; ADoc: TdomDocument;
      DocIsOwned: Boolean); reintroduce;
    destructor Destroy; override;
    property Document: TdomDocument;
    property PreserveWhitespace: Boolean;
  end;

{ TOXDOMImplementationFactory }

  TOXDOMImplementationFactory = class(TDOMVendor)
  public
    function DOMImplementation: IDOMImplementation; override;
    function Description: String; override;
  end;

var
  OpenXMLFactory: TOXDOMImplementationFactory;

implementation
